name: word-light_document_builder main

run-name: ${{ github.event.head_commit.message }}
on: 
  push: 
    branches:
      - dev

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository 
        uses: actions/checkout@v4.2.2
      - name: Setup JDK
        uses: actions/setup-java@v4.6.0
        with: 
          distribution: 'temurin'
          java-version: '17'
      - name: Start db
        run: docker compose -f 'docker-compose.dev.yml' up db -d    
      - run: ./gradlew clean build -i
  

  push_to_Dockerhub:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout repository 
        uses: actions/checkout@v4.2.2
  
      - name: move .env vars to pipeline
        run: |
          echo $(cat .env.version | grep '^VERSION=.*$') >> $GITHUB_ENV
          echo $(cat .env | grep '^API_NAME=.*$') >> $GITHUB_ENV
        shell: bash

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Build and push
        uses: docker/build-push-action@v6.10.0
        with:
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/code_notes_frontend:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/code_notes_frontend:${{env.VERSION}}
          build-args: |
            VERSION=${{env.VERSION}}
            API_NAME=${{env.API_NAME}}

#   deploy_to_server:
#     runs-on: ubuntu-latest
#     needs: push_to_Dockerhub

#     steps:
#       - uses: appleboy/ssh-action@v1.2.0
#         with: 
#           host: word-light.de
#           username: ${{ secrets.SSH_USER_NAME }}
#           password: ${{ secrets.SSH_PASSWORD }}
#           debug: true
#           # pull new image, remove left overs from old image, start microservice
#           script: |
#             docker-compose pull api
#             yes | docker rm $(docker container ls --all --filter=ancestor=$(docker images -f "dangling=true" -q) --format "{{.ID}}") --force
#             yes | docker image rm $(docker images -f "dangling=true" -q)
#             docker-compose up -d